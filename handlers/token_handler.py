# handlers/token_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.db import add_token, remove_token, list_tokens
import logging

# –ù–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ —É user_data
STATE_ADD_TOKEN     = "adding_token"
STATE_REMOVE_TOKEN  = "removing_token"

async def prompt_token_wallet_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–æ–∫ 1: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –î–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω."""
    context.user_data[STATE_ADD_TOKEN] = True
    await update.callback_query.message.reply_text("üî∑ –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–æ–∫–µ–Ω–∞ (BSC):")

async def prompt_token_removal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–æ–∫ 1: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–∫–µ–Ω."""
    tokens = list_tokens(update.effective_user.id)
    if not tokens:
        return await update.callback_query.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω—ñ–≤.")
    buttons = [
        InlineKeyboardButton(t["name"], callback_data=f"remove_token_{t['name']}")
        for t in tokens
    ]
    context.user_data[STATE_REMOVE_TOKEN] = True
    await update.callback_query.message.reply_text(
        "üóë –û–±–µ—Ä—ñ—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", 
        reply_markup=InlineKeyboardMarkup([buttons])
    )

async def show_user_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–ª–±–µ–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'list' ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å–µ."""
    wallets = list_tokens(update.effective_user.id)
    tokens  = list_tokens(update.effective_user.id)
    text = ["üî∑ –í–∞—à—ñ –≥–∞–º–∞–Ω—Ü—ñ:"]
    text += [f"‚Ä¢ {w['name']}: `{w['address']}`" for w in wallets] or ["(–Ω–µ–º–∞—î)"]
    text += ["\nüî∑ –í–∞—à—ñ —Ç–æ–∫–µ–Ω–∏:"]
    text += [f"‚Ä¢ {t['name']}: `{t['contract']}`" for t in tokens] or ["(–Ω–µ–º–∞—î)"]
    await update.callback_query.message.reply_text("\n".join(text), parse_mode="Markdown")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text    = update.message.text.strip()

    # 1) –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ (–∞–¥—Ä–µ—Å–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É)
    if context.user_data.pop(STATE_ADD_TOKEN, False):
        # –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è —ñ–º'—è —Ç–æ–∫–µ–Ω–∞ –±–µ—Ä–µ–º–æ —è–∫ —á–∞—Å—Ç–∏–Ω—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        name = text[:8]  # –∞–±–æ –±—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ —ñ–º–µ–Ω—ñ
        add_token(user_id, name, text)
        await update.message.reply_text(f"‚úÖ –¢–æ–∫–µ–Ω –∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º `{text}` –¥–æ–¥–∞–Ω–æ.", parse_mode="Markdown")
        logging.info(f"[token] user={user_id} added token '{name}'")
        return

    # 2) –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
    if text.startswith("remove_token_") and context.user_data.pop(STATE_REMOVE_TOKEN, False):
        name = text[len("remove_token_"):]
        remove_token(user_id, name)
        await update.message.reply_text(f"üóë –¢–æ–∫–µ–Ω '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
        logging.info(f"[token] user={user_id} removed token '{name}'")
        return

    # 3) –Ø–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –Ω—ñ—á–æ–≥–æ –∑ –Ω–∏–º –Ω–µ —Ä–æ–±–∏–º–æ
