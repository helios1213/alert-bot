# handlers/wallet_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.db import add_wallet, remove_wallet, list_wallets
import logging

# –°—Ç–∞–Ω–∏ FSM —É context.user_data
STATE_WALLET_NAME = "wallet_name"
STATE_WALLET_ADDRESS = "wallet_address"

async def prompt_wallet_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–æ–∫ 1: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –î–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å, –∑–∞–ø–∏—Ç—É—î–º–æ –Ω–∞–∑–≤—É."""
    context.user_data[STATE_WALLET_NAME] = True
    await update.callback_query.message.reply_text("üî∑ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥–∞–º–∞–Ω—Ü—è:")

async def prompt_wallet_removal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–æ–∫ 1: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –í–∏–¥–∞–ª–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å."""
    wallets = list_wallets(update.effective_user.id)
    if not wallets:
        return await update.callback_query.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –≥–∞–º–∞–Ω—Ü—ñ–≤.")
    buttons = [InlineKeyboardButton(w["name"], callback_data=f"remove_wallet_{{w['name']}}") for w in wallets]
    await update.callback_query.message.reply_text(
        "üóë –û–±–µ—Ä—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
        reply_markup=InlineKeyboardMarkup([buttons])
    )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≥–∞–º–∞–Ω–µ—Ü—å
    if data.startswith("remove_wallet_"):
        name = data.split("remove_wallet_", 1)[1]
        remove_wallet(update.effective_user.id, name)
        await update.callback_query.message.reply_text(f"üóë –ì–∞–º–∞–Ω–µ—Ü—å '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
        logging.info(f"[wallet] user={update.effective_user.id} removed wallet '{name}'")
        return
    # –Ü–Ω—à—ñ callback –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –≤ main

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # 1) –û—Ç—Ä–∏–º–∞–ª–∏ –Ω–∞–∑–≤—É –≥–∞–º–∞–Ω—Ü—è
    if context.user_data.pop(STATE_WALLET_NAME, False):
        context.user_data['new_wallet_name'] = text
        context.user_data[STATE_WALLET_ADDRESS] = True
        await update.message.reply_text("üî∑ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è (BSC):")
        return

    # 2) –û—Ç—Ä–∏–º–∞–ª–∏ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è
    if context.user_data.pop(STATE_WALLET_ADDRESS, False):
        name = context.user_data.pop('new_wallet_name')
        address = text
        add_wallet(user_id, name, address)
        await update.message.reply_text(
            f"‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å '{name}' –∑ –∞–¥—Ä–µ—Å–æ—é `{address}` –¥–æ–¥–∞–Ω–æ.",
            parse_mode="Markdown"
        )
        logging.info(f"[wallet] user={user_id} added wallet '{name}:{address}'")
        return

    # –Ü–Ω–∞–∫—à–µ ‚Äî –Ω—ñ—á–æ–≥–æ

