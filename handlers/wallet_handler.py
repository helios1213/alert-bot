# handlers/wallet_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.db import add_wallet, remove_wallet, list_wallets
import logging

# –ù–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ —É user_data
STATE_ADD_WALLET = "adding_wallet"
STATE_REMOVE_WALLET = "removing_wallet"

async def prompt_wallet_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–æ–∫ 1: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –î–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å."""
    context.user_data[STATE_ADD_WALLET] = True
    # –ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –∞–¥—Ä–µ—Å—É
    await update.callback_query.message.reply_text("üî∑ –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è (BSC):")

async def prompt_wallet_removal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–æ–∫ 1: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –í–∏–¥–∞–ª–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å."""
    wallets = list_wallets(update.effective_user.id)
    if not wallets:
        return await update.callback_query.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –≥–∞–º–∞–Ω—Ü—ñ–≤.")
    buttons = [
        InlineKeyboardButton(w["name"], callback_data=f"remove_wallet_{w['name']}")
        for w in wallets
    ]
    context.user_data[STATE_REMOVE_WALLET] = True
    await update.callback_query.message.reply_text(
        "üóë –û–±–µ—Ä—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
        reply_markup=InlineKeyboardMarkup([buttons])
    )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
    if data.startswith("remove_wallet_") and context.user_data.pop(STATE_REMOVE_WALLET, False):
        name = data.split("remove_wallet_", 1)[1]
        remove_wallet(update.effective_user.id, name)
        await update.callback_query.message.reply_text(f"üóë –ì–∞–º–∞–Ω–µ—Ü—å '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
        logging.info(f"[wallet] user={update.effective_user.id} removed wallet '{name}'")
        return

    # –Ü–Ω—à—ñ callback-–æ–ø–µ—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–ª—é—é—Ç—å—Å—è –≤ main.py

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è."""
    # –Ø–∫—â–æ –æ—á—ñ–∫—É—î–º–æ –∞–¥—Ä–µ—Å—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
    if context.user_data.pop(STATE_ADD_WALLET, False):
        address = update.message.text.strip()
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–¥—Ä–µ—Å—É —è–∫ —ñ–º'—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏
        add_wallet(update.effective_user.id, address, address)
        await update.message.reply_text(
            f"‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å `{address}` –¥–æ–¥–∞–Ω–æ.",
            parse_mode="Markdown"
        )
        logging.info(f"[wallet] user={update.effective_user.id} added wallet '{address}'")
        return
    # –Ü–Ω–∞–∫—à–µ –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –∞–±–æ –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–ª—ñ —ñ–Ω—à–∏–º –æ–±—Ä–æ–±–Ω–∏–∫–∞–º

