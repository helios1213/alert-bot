import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from handlers import wallet_handler, token_handler
from utils.scheduler import start_scheduler
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")
PORT           = int(os.environ.get("PORT", "5000"))

if not TELEGRAM_TOKEN or not WEBHOOK_URL:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –∞–±–æ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω—ñ –≤ .env!")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# /start ‚Äì –ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å", callback_data="add_wallet")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω",    callback_data="add_token")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å", callback_data="remove_wallet")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–∫–µ–Ω",    callback_data="remove_token")],
        [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="list")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –û–±–∏ –¥—ñ—é:", reply_markup=reply_markup)

# CallbackQuery ‚Äì –¥–µ–ª–µ–≥—É—î–º–æ –≤ –æ–±–∏–¥–≤–∞ handler-–∏
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    await update.callback_query.answer()
    # –≥–∞–º–∞–Ω–µ—Ü—å
    if data == "add_wallet":
        return await wallet_handler.prompt_wallet_address(update, context)
    if data == "remove_wallet":
        return await wallet_handler.prompt_wallet_removal(update, context)
    # —Ç–æ–∫–µ–Ω
    if data == "add_token":
        return await token_handler.prompt_token_wallet_choice(update, context)
    if data == "remove_token":
        return await token_handler.prompt_token_removal(update, context)
    # —Å–ø–∏—Å–æ–∫
    if data == "list":
        return await token_handler.show_user_data(update, context)
    # —É—Å—ñ callback-–∏ –≤—ñ–¥ token_handler —ñ wallet_handler
    # (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –≤–∏–±—ñ—Ä —è–∫–æ–≥–æ—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è —á–∏ —Ç–æ–∫–µ–Ω–∞)
    # –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ —ó—Ö–Ω—ñ on_callback_query
    if data.startswith("token_wallet_") or data.startswith("remove_token_"):
        return await token_handler.handle_callback_query(update, context)
    if data.startswith("remove_wallet_"):
        return await wallet_handler.handle_callback_query(update, context)

# –ó–≤–∏—á–∞–π–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äì —Ç–µ–∂ –¥–µ–ª–µ–≥—É—î–º–æ
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    # —è–∫—â–æ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
    await wallet_handler.handle_text(update, context)
    # —è–∫—â–æ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    await token_handler.handle_text(update, context)

async def on_startup(app: ApplicationBuilder):
    # —Å—Ç–∞–≤–∏–º–æ –≤–µ–±—Ö—É–∫
    await app.bot.set_webhook(WEBHOOK_URL)
    # –∑–∞–ø—É—Å–∫–∞—î–º–æ scheduler
    app.create_task(start_scheduler(app.bot))
    logging.info("üöÄ Scheduler –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≤–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏ —Ç–∞ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))

    # –ø—ñ—Å–ª—è —ñ–Ω–∏—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    app.post_init = on_startup

    # —Å—Ç–∞—Ä—Ç—É—î–º–æ webhook‚Äê—Å–µ—Ä–≤–µ—Ä
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
    )

if __name__ == "__main__":
    main()
