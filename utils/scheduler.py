import asyncio
import json
import os
from aiohttp import ClientSession
from telegram import Bot

DATA_FILE = "data.json"

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

async def check_wallets(app):
    bot: Bot = app.bot
    api_key = os.getenv("BSCSCAN_API_KEY")
    data = load_data()

    async with ClientSession() as session:
        for user_id, user_info in data.items():
            # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö —Ç–æ–∫–µ–Ω—ñ–≤
            sent_counts = user_info.setdefault("sent_counts", {})
            for wallet in user_info.get("wallets", []):
                address = wallet["address"]
                for token in user_info.get("tokens", []):
                    if token["wallet_name"] != wallet["name"]:
                        continue

                    contract = token["contract"]
                    # —è–∫—â–æ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ >=20 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ —Ü—å–æ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                    if sent_counts.get(contract, 0) >= 20:
                        continue

                    url = (
                        f"https://api.bscscan.com/api"
                        f"?module=account"
                        f"&action=tokentx"
                        f"&address={address}"
                        f"&contractaddress={contract}"
                        f"&sort=desc"
                        f"&apikey={api_key}"
                    )

                    try:
                        async with session.get(url) as resp:
                            res = await resp.json()
                            if res.get("status") != "1":
                                continue

                            for tx in res["result"][:20]:
                                # —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∏—Ö—ñ–¥–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ —Ü—å–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
                                if tx["from"].lower() != address.lower():
                                    continue

                                quantity = int(tx["value"]) / (10 ** int(tx["tokenDecimal"]))
                                if float(token["min"]) <= quantity <= float(token["max"]):
                                    tx_hash = tx["hash"]

                                    if tx_hash in user_info.get("seen", []):
                                        continue

                                    message = (
                                        f"üîî –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —Ç–æ–∫–µ–Ω—É {token['name']}:\n"
                                        f"üì§ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}\n"
                                        f"üîó –•–µ—à: {tx_hash}"
                                    )

                                    await bot.send_message(chat_id=user_id, text=message)

                                    # –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
                                    sent_counts[contract] = sent_counts.get(contract, 0) + 1

                                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                                    user_info.setdefault("seen", []).append(tx_hash)

                                    # –ó–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ –æ—Å—Ç–∞–Ω–Ω—ñ 100
                                    if len(user_info["seen"]) > 100:
                                        user_info["seen"] = user_info["seen"][-100:]

                    except Exception as e:
                        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API: {e}")

    save_data(data)

async def start_scheduler(app):
    while True:
        try:
            await check_wallets(app)
        except Exception as e:
            print(f"‚ùå Scheduler error: {e}")
        await asyncio.sleep(15)
